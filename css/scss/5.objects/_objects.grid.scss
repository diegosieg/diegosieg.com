/**
 * OBJECTS.GRID
 *
 * @description : Grid
 * @settings    : See /1.settings/_settings.grid.scss
 *
 */

// Default settings, these should be overridden in /1.settings/_settings.grid.scss
$bodyMax:        90rem      !default;
$bodyMaxSlim:    61.25rem   !default;
$bodyFluid:      100%       !default;
$gridCols:       12         !default;
$boxSizing:      border-box !default;
$includeIndent:  true       !default;

/** -------------------------------------------------------
 *  GRID WIDTH CALULATOR
 */

$gridMap: (); //set an empty map for starters
//this loop creates an array (a Sass "map") of possible column width percentages
@for $x from 1 through $gridCols {
    $gridPercentage: percentage(decimal-floor(($x / $gridCols), 10));
    $gridMap: map-merge($gridMap, ("#{$x}": $gridPercentage));
}

/**
 * General Styles
 */

// Box sizing
*, *:before, *:after {
    box-sizing: $boxSizing;
}
// Body //
.b {
    position: relative;
    max-width: $bodyMax;
    margin-left: auto;
    margin-right: auto;
}

// Body slim //
.b-s {
    max-width: $bodyMaxSlim;
}

// Body fluid //
.b-fluid {
    max-width: $bodyFluid;
}

/**
 *  Helper classes for non-grid items so they fit nicely within the grid
 */
.ng-p {
    padding-left: $gutter;
    padding-right: $gutter;
}
.ng-pr {
    padding-left: 0;
    padding-right: $gutter;
}
.ng-pl {
    padding-left: $gutter;
    padding-right: 0;
}
.ng-m {
    margin-left: $gutter;
    margin-right: $gutter;
}
.ng-mr {
    margin-left: 0;
    margin-right: $gutter;
}
.ng-ml {
    margin-left: $gutter;
    margin-right: 0;
}


/**
 * The Grid
 */
.g {
    letter-spacing: -0.31em;
    *letter-spacing: normal;
    *word-spacing: -0.43em;
    text-rendering: optimizespeed;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;

    .no-flexbox & { // fallback non-flex browsers (modernizr required)
        display: table-cell;
        float: left;
        width: 100%;
    }

    &-m { // This is only needed if .gi-m classes are applied to children
        margin: 0 $negativeGutter;
    }
}

.opera-only :-o-prefocus,
.g {
    word-spacing: -0.43em;
}

.g-flex {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: flex-start;
    position: relative;
    width: 100%;
}

/** -------------------------
 *  GRID ITEMS
 */
.gi {
    display: inline-block;
    letter-spacing: normal;
    word-spacing: normal;
    text-rendering: auto;
    width: 100%;
}

//  Grid Item Modifiers

// Grid Item – Padded
.gi-p {
    padding-left: $gutter;
    padding-right: $gutter;
}

// Grid Item – Padded Right
.gi-pr {
    padding-right: $gutter;
}

// Grid Item – Padded Left
.gi-pl {
    padding-left: $gutter;
}

// Grid Item – Margin
.gi-m {
    margin-left: $gutter;
    margin-right: $gutter;
}

// Grid Item – Margin Left
.gi-ml {
    margin-left: $gutter;
}

// Grid Item – Margin Right
.gi-mr {
    margin-right: $gutter;
}

// Grid Item – Vertical Align Middle
.g-vam {
    align-items: center;
}
.g-vam .gi,
.g-vam .gi-p,
.g-vam .gi-pl,
.g-vam .gi-pr,
.gi-m {
    vertical-align: middle;
}

// Grid generation including widths for given number of columns
@each $i in $gridMap {
    $key: nth($i, 1);
    $value: nth($i, 2);
    .gi-#{$key} { width: $value; }
    .gi-m.gi-#{$key} { width: $value - ($gutter * 2); }
    .gi-mr.gi-#{$key}, .gi-mr.gi-#{$key} { width: $value - $gutter; }
    @if ($includeIndent == true) {
        .gi-in-#{$key} {
            margin-left: $value;
        }
        .gi-m.gi-in-#{$key},
        .gi-ml.gi-in-#{$key} {
            margin-left: $value + $gutter;
        }
    }
}

//repeat for responsive breakpoints
@each $breakpoint, $width in  $breakpoints {
    @media (min-width: $width) {
        @each $i in $gridMap {
            $key: nth($i, 1);
            $value: nth($i, 2);
            .gi-#{$breakpoint}-#{$key} { width: $value; }
            .gi-m.gi-#{$breakpoint}-#{$key} { width: $value - ($gutter * 2); }
            .gi-ml.gi-#{$breakpoint}-#{$key},
            .gi-mr.gi-#{$breakpoint}-#{$key} { width: $value - $gutter; }
            @if ($includeIndent == true) {
                .gi-#{$breakpoint}-in-#{$key} {
                    margin-left: $value;
                }
                .gi-m.gi-#{$breakpoint}-in-#{$key},
                .gi-ml.gi-#{$breakpoint}-in-#{$key} {
                    margin-left: $value + $gutter;
                }
            }
        }

        // Breakpoint-specific left/right padding
        .gi-#{$breakpoint}-pr {
            padding-left: 0; padding-right: $gutter;
        }
        .gi-#{$breakpoint}-pl {
            padding-left: $gutter; padding-right: 0;
        }
    }
}
